import java.io.File;
import java.io.FileWriter;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Scanner;

//RSADecrypt.java : Decrypts a file

/*
	you will write a program to decrypt the encrypted file that has been generated by the 
	encryption procedure described earlier.
	The decryption algorithm should be runnable from a file named “RSADecrypt.java” (that is, this
	file should have the main method). The program will be called with the input encrypted file and
	the key file as arguments. The key file will be in the same format as described previously.
	The program will be invoked as :
	c:\> java RSADecrypt test.enc pri_key.txt
	where test.enc is the name of the file to be decrypted. The decrypted file that the 
	program generates should be named “test.dec”.
 */

// run as "java RSADecrypt testE.txt pri_key.txt"

public class RSADecrypt {
	static int blockSize = 6;
	static String fileName = "test.dec";

	public static void decrypt(String c, String key) {
		String keyy = readFile(key);
		keyy = keyy.replace("n", " n");
		String[] keySplit = keyy.split(" ");
		int keyInt = Integer.parseInt(keySplit[2]);
		BigInteger n = new BigInteger(keySplit[5]);
		int nPad = keySplit[5].length();
		
		ArrayList<String> cSplit = new ArrayList<String>();
		for (int i=0; i<c.length()/nPad; i++) {
			cSplit.add(c.substring(i*nPad, i*nPad + nPad));
		}
		
		BigInteger cInt;
		BigInteger d;
		
		try {
			File file = new File(fileName);
			file.createNewFile();
			
			FileWriter writer = new FileWriter(fileName);
			String totalString = "";
			for (int i=0; i<cSplit.size();i++) {
				// Just a loading indicator
				if ((int)((double)i/cSplit.size()*100) % 5 == 0) {
					System.out.println(((int)((double)i/cSplit.size()*100)) +"% Loaded");
				}
				
				cInt = new BigInteger(cSplit.get(i));
				d = (cInt.pow(keyInt)).mod(n);
				// Pad the message if missing 0's
				int curPad = 0;
				String splitString = "";
				while (curPad + (d+"").length() != nPad) {
					splitString += "0";
					curPad++;
				}
				splitString += d;
				
				totalString += numToChar(splitString.substring(0,2));
				totalString += numToChar(splitString.substring(2,4));
				totalString += numToChar(splitString.substring(4,6));
				
			}
			writer.write(totalString);
			writer.close();
			System.out.println("Decrypted the text to " + fileName);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	// Helper function to convert number to corresponding ASCII char (also takes care of special chars)
	public static char numToChar(String number) {
		int converted = Integer.parseInt(number)+97;
		
		if (converted == 123) {
			converted = 32;
		} else if (converted == 124) {
			converted = 46;
		} else if (converted == 125) {
			converted = 44;
		} else if (converted == 126) {
			converted = 10;
		}
		
		return (char)converted;
	}
	
	// Helper function to read file and return it as a String
	public static String readFile(String fileName) {
		String msg = "";
		try {
			File file = new File(fileName);
			Scanner reader = new Scanner(file);
			while (reader.hasNextLine()) {
				msg += reader.nextLine();
			}
			reader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return msg;
	}
	
	// Helper function for printing out String arrays
	public static void print(String[] array) {
		for (int i=0; i<array.length; i++) {
			System.out.print(array[i] + " " );
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		decrypt(readFile(args[0]), args[1]);
	}
	
}
